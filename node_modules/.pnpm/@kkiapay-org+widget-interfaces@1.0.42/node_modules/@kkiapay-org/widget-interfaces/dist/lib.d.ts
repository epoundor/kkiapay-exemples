export declare enum EnvMode {
    DEV = "DEV",
    LIVE = "LIVE",
    SANDBOX = "SANDBOX"
}
export declare enum TRANSACTION_STATUS {
    PENDING = "PENDING",
    SUCCESS = "SUCCESS",
    FAILED = "FAILED",
    INIT = "INIT"
}
export declare enum PaymentMethod {
    momo = "momo",
    card = "card",
    direct_debit = "direct_debit"
}
export declare enum InitProcess {
    user_information = "user_information"
}
export declare enum MomoProcess {
    waiting_user_feedback = "waiting_user_feedback",
    code_pin = "code_pin"
}
export declare enum BankCardsProcess {
    need_user_pin = "need_user_pin",
    need_otp_verification = "need_otp_verification",
    need_billing_details = "need_billing_details",
    need_link_verification = "need_link_verification"
}
export declare enum WaveProcess {
    wave_launch_url = "wave_launch_url"
}
export declare enum DirectDebitProcess {
    enrollment = "enrollment",
    confirm_phone = "confirm_phone",
    confirm_payment = "confirm_payment"
}
export declare enum PaymentProcess {
    user_information = "user_information",
    waiting_user_feedback = "waiting_user_feedback",
    code_pin = "code_pin",
    need_user_pin = "need_user_pin",
    need_otp_verification = "need_otp_verification",
    need_billing_details = "need_billing_details",
    need_link_verification = "need_link_verification",
    wave_launch_url = "wave_launch_url",
    enrollment = "enrollment",
    confirm_phone = "confirm_phone",
    confirm_payment = "confirm_payment"
}
export interface Action {
    failure?: () => void;
    success?: () => void;
}
export interface IRessources {
    amount: number;
    key: string;
    host: string;
    serviceId: string;
    phoneNumber?: string;
    fullname?: string;
    email?: string;
    reason?: string;
    callback?: string;
    sandbox?: boolean;
    position?: string;
    theme?: string;
    url?: string;
    data?: string | Record<string, any>;
    partnerId?: string;
    direct?: string;
    split?: string;
    sdk?: string;
    providers?: {
        accept?: string[];
        exclude?: string[];
    };
    paymentMethods?: string[];
    authorized_payment_source?: string[];
    countries?: string[];
    defaultCountry?: string;
    poste?: boolean;
    e_services?: boolean;
    donation?: boolean;
    collect?: boolean;
    hasminimalamount?: boolean;
}
export interface IPaymentAttrs {
    amount: number;
    email: string;
    provider: string;
    reason?: string;
    stateData?: string;
    partnerId?: string;
    direct?: string;
    split?: string;
    sdk?: string;
}
export interface IMomoForm extends IPaymentAttrs {
    country: string;
    name?: string;
    firstname?: string;
    lastname?: string;
    phoneNumber?: string;
    contact?: string;
}
export interface ICardForm extends IPaymentAttrs {
    fullname: string;
    token: string;
    step: number;
    reason: string;
    transactionId: string;
    suggested_auth: string;
    cardId?: string;
    expDate?: string;
    cvc?: string;
    bank?: string;
    pin?: string;
    otp?: string;
    message?: string;
}
export interface IWaveForm extends IPaymentAttrs {
    name: string;
    channel: string;
    success_url: string;
    error_url: string;
}
export interface IDirectDebitForm extends IPaymentAttrs {
    fullname: string;
    pin: string;
    provider: string;
    account: string;
}
export declare enum ListenerEventName {
    NETWORK_STATE_CHANGED = "NETWORK_STATE_CHANGED",
    INIT_WIDGET = "INIT_WIDGET",
    WIDGET_SUCCESSFULLY_INIT = "WIDGET_SUCCESSFULLY_INIT",
    CLOSE_WIDGET = "CLOSE_WIDGET",
    DESTROY_WIDGET = "DESTROY_WIDGET",
    WIDGET_SUCCESSFULLY_DESTROYED = "WIDGET_SUCCESSFULLY_DESTROYED",
    PAYMENT_INIT = "PAYMENT_INIT",
    PAYMENT_ABORTED = "PAYMENT_ABORTED",
    PENDING_PAYMENT = "PENDING_PAYMENT",
    ON_USER_FEEDBACK = "ON_USER_FEEDBACK",
    PAYMENT_FAILED = "PAYMENT_FAILED",
    PAYMENT_SUCCESS = "PAYMENT_SUCCESS",
    PAYMENT_END = "PAYMENT_END",
    RETRY_PAYMENT = "RETRY_PAYMENT",
    WAVE_LINK = "WAVE_LINK"
}
export interface LifecycleInterface {
    ressources: IRessources | null;
    initWidget: (data: IRessources, cb: (data: IRessources) => void) => void;
    destroyWidget: () => void;
    closeWidget: () => void;
    initPayment: () => void;
    waitingUserFeedback: () => void;
    onPaymentAborted: () => void;
    onUserFeedback: (paymentResponse: any, whatToDo?: Action) => void;
    endPayment: (url?: string) => void;
    onAfterFailure: (retryTransaction: boolean) => void;
}
//# sourceMappingURL=lib.d.ts.map