export declare type TEvent = {
    [key in ListenerEventName]: (data?: any) => void;
};
export interface IData {
    amount: number;
    theme?: string;
    countries?: string[];
    paymentMethods?: string[];
    paymentmethod?: string[];
    fullname?: string;
    name?: string;
    email?: string;
    phone?: string;
    sandbox?: boolean;
    position?: string;
    key?: string;
    data?: string | Record<string, never>;
    api_key?: string;
    publicAPIKey?: string;
    callback?: string;
    url?: string;
    direct?: string;
    split?: string;
    partnerId?: string;
}
export interface ListenerData {
    transactionId: string;
    data?: string;
    partnerId?: string;
    flwRef?: string;
}
export declare enum ListenerEventName {
    NETWORK_STATE_CHANGED = "NETWORK_STATE_CHANGED",
    INIT_WIDGET = "INIT_WIDGET",
    WIDGET_SUCCESSFULLY_INIT = "WIDGET_SUCCESSFULLY_INIT",
    CLOSE_WIDGET = "CLOSE_WIDGET",
    DESTROY_WIDGET = "DESTROY_WIDGET",
    WIDGET_SUCCESSFULLY_DESTROYED = "WIDGET_SUCCESSFULLY_DESTROYED",
    PAYMENT_INIT = "PAYMENT_INIT",
    PAYMENT_ABORTED = "PAYMENT_ABORTED",
    PENDING_PAYMENT = "PENDING_PAYMENT",
    ON_USER_FEEDBACK = "ON_USER_FEEDBACK",
    PAYMENT_FAILED = "PAYMENT_FAILED",
    PAYMENT_SUCCESS = "PAYMENT_SUCCESS",
    PAYMENT_END = "PAYMENT_END",
    RETRY_PAYMENT = "RETRY_PAYMENT"
}
export interface ILibrary {
    openKkiapayWidget: (configs: IData) => void;
    closeKkiapayWidget: () => void;
    addSuccessListener: (cb: (data?: any) => void) => void;
    addWidgetInitListener: (cb: () => void) => void;
    addKkiapayCloseListener: (cb: () => void) => void;
    addWidgetDestroyedListener: (cb: () => void) => void;
    addPaymentInitListener: (cb: () => void) => void;
    addPaymentAbortedListener: (cb: () => void) => void;
    addFeedbackListener: (cb: () => void) => void;
    addPendingListener: (cb: () => void) => void;
    addFailedListener: (cb: (data?: any) => void) => void;
    addPaymentEndListener: (cb: () => void) => void;
    removeKkiapayListener: (event: string) => void;
    addKkiapayListener: (event: 'success' | 'failed', cb: (data?: any) => void) => void;
    onNetworkStateChanged: (cb: () => void) => void;
}
//# sourceMappingURL=typings.d.ts.map